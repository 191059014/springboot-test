package ${package};

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;

/**
 * ${comments}服务层实现类
 *
 * @version v0.1, ${nowTime}, create by ${author}.
 */
@Service
public class ${className}ServiceImpl implements I${className}Service {

    /**
     * 日志
     */
    private static final Logger LOGGER = LoggerFactory.getLogger(${className}ServiceImpl.class);

    /**
     * ${comments}操作数据库层
     */
    @Resource
    private I${className}Mapper ${className}Mapper;

    /**
     * 通过主键查询单条数据
     *
     * @param ${pk.attrName}
     *            主键
     * @return 实例对象
     */
    @Override
    public ${className}DO selectById(${pk.attrType} ${pk.attrName}) {
        return this.${className}Mapper.selectById(${pk.attrName});
    }

    /**
     * 通过实体作为筛选条件查询集合
     *
     * @param ${classname}
     *            查询条件
     * @return 对象列表
     */
    @Override
    public List<${className}DO> selectList(${className}DO ${classname}) {
        return this.${className}Mapper.selectList(${classname});
    }

    /**
     * 条件查询总条数
     *
     * @param ${classname}
     *            查询条件
     * @return 总条数
     */
    @Override
    public Long selectCount(${className}DO ${classname}) {
        return this.${className}Mapper.selectCount(${classname});
    }

    /**
     * 分页查询数据
     *
     * @param ${classname}
     *            查询条件
     * @param startRow
     *            查询起始位置
     * @param pageSize
     *            每页查询条数
     * @return 对象列表
     */
    @Override
    public List<${className}DO> selectPages(${className}DO ${classname}, int startRow, int pageSize) {
        return this.${className}Mapper.selectPages(${classname}, startRow, pageSize);
    }

    /**
     * 选择性新增
     *
     * @param ${classname}
     *            实例对象
     * @return 影响行数
     */
    @Override
    public int insertBySelective(${className}DO ${classname}) {
        return this.${className}Mapper.insertBySelective(${classname});
    }

    /**
     * 选择性修改
     *
     * @param ${classname}
     *            实例对象
     * @return 影响行数
     */
    @Override
    public int updateBySelective(${className}DO ${classname}) {
        return this.${className}Mapper.updateBySelective(${classname});
    }

    /**
     * 通过主键删除数据
     *
     * @param ${pk.attrName}
     *            主键
     * @return 影响行数
     */
    @Override
    public int deleteById(${pk.attrType} ${pk.attrName}) {
        return this.${className}Mapper.deleteById(${pk.attrName});
    }

}
