package ${package};

import org.springframework.stereotype.Service;
import lombok.extern.slf4j.Slf4j;
import org.springframework.util.CollectionUtils;

import java.util.List;
import java.util.Set;
import javax.annotation.Resource;

import com.hb.platform.unic.base.model.Page;
import com.hb.platform.unic.base.model.PageCondition;

/**
 * ${comments}服务层实现类
 *
 * @version v0.1, ${nowTime}, create by ${author}.
 */
@Slf4j
@Service
public class ${upperClassName}ServiceImpl implements I${upperClassName}Service {

    /**
     * ${comments}操作数据库层
     */
    @Resource
    private I${upperClassName}Mapper ${lowerClassName}Mapper;

    /**
     * 通过主键查询单条数据
     *
     * @param ${pk.lowerAttrName}
     *            主键
     * @return 实例对象
     */
    @Override
    public ${upperClassName}DO selectById(${pk.attrType} ${pk.lowerAttrName}) {
        return this.${lowerClassName}Mapper.selectById(${pk.lowerAttrName});
    }

    /**
     * 通过条件查询单条数据
     *
     * @param ${lowerClassName}
     *            查询条件
     * @return 对象列表
     */
    @Override
    public ${upperClassName}DO selectOne(${upperClassName}DO ${lowerClassName}) {
        List<${upperClassName}DO> list = this.${lowerClassName}Mapper.selectList(${lowerClassName});
        return CollectionUtils.isEmpty(list) ? null : list.get(0);
    }

    /**
     * 通过实体作为筛选条件查询集合
     *
     * @param ${lowerClassName}
     *            查询条件
     * @return 对象列表
     */
    @Override
    public List<${upperClassName}DO> selectList(${upperClassName}DO ${lowerClassName}) {
        return this.${lowerClassName}Mapper.selectList(${lowerClassName});
    }

    /**
     * 分页查询数据
     *
     * @param ${lowerClassName}
     *            查询条件
     * @param pageNum
     *            当前页数
     * @param pageSize
     *            每页查询条数
     * @return 对象列表
     */
    @Override
    public Page<${upperClassName}DO> selectPages(${upperClassName}DO ${lowerClassName}, int pageNum, int pageSize) {
        Long count = this.${lowerClassName}Mapper.selectCount(${lowerClassName});
        List<${upperClassName}DO> dataList = this.${lowerClassName}Mapper.selectPages(${lowerClassName}, PageCondition.create(pageNum, pageSize));
        return Page.create(count, dataList);
    }

    /**
     * 通过id集合查询
     *
     * @param idSet
     *            id集合
     * @param ${lowerClassName}
     *            查询条件
     * @return 结果集
     */
    @Override
    public List<${upperClassName}DO> selectByIdSet(Set<${pk.attrType}> idSet, ${upperClassName}DO ${lowerClassName}) {
        return this.${lowerClassName}Mapper.selectBy${pk.upperAttrName}Set(idSet, ${lowerClassName});
    }


    /**
     * 选择性新增
     *
     * @param ${lowerClassName}
     *            实例对象
     * @return 影响行数
     */
    @Override
    public int insert(${upperClassName}DO ${lowerClassName}) {
        return this.${lowerClassName}Mapper.insert(${lowerClassName});
    }

    /**
     * 通过主键修改
     *
     * @param ${lowerClassName}
     *            实例对象
     * @return 影响行数
     */
    @Override
    public int updateById(${upperClassName}DO ${lowerClassName}) {
        return this.${lowerClassName}Mapper.updateById(${lowerClassName});
    }

    /**
     * 通过主键删除数据
     *
     * @param ${pk.lowerAttrName}
     *            主键
     * @return 影响行数
     */
    @Override
    public int deleteById(${pk.attrType} ${pk.lowerAttrName}) {
        return this.${lowerClassName}Mapper.deleteById(${pk.lowerAttrName});
    }

}
