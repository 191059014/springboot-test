package ${package};

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import lombok.extern.slf4j.Slf4j;
import javax.annotation.Resource;
import com.hb.platform.hbcommon.validator.Assert;
import com.hb.platform.hbcommon.validator.Check;
import com.hb.platform.hbbase.common.Result;
import com.hb.platform.hbbase.common.ResultCode;
import com.hb.platform.hbbase.model.Page;
import com.hb.platform.hbbase.annotation.InOutLog;

/**
 * ${comments}控制层
 *
 * @version v0.1, ${nowTime}, create by ${author}.
 */
@Slf4j
@RestController
@RequestMapping("/${lowerClassName}")
public class ${upperClassName}Controller {

    /**
     * ${comments}服务层
     */
    @Resource
    private I${upperClassName}Service ${lowerClassName}Service;

    /**
     * 分页查询${comments}
     *
     * @param ${lowerClassName}
     *              查询条件对象
     * @param pageNum
     *              当前第几页
     * @param pageSize
     *              每页条数
     * @return 分页结果
     */
    @PostMapping("/queryPages")
    public Result<Page<${upperClassName}DO>> queryPages(@RequestBody ${upperClassName}DO ${lowerClassName},
        @RequestParam("pageNum") Integer pageNum, @RequestParam("pageSize") Integer pageSize) {
        Assert.ifTrueThrows(Check.incorrectPageParameter(pageNum, pageSize), ResultCode.PAGE_PARAM_ERROR);
        return Result.success(${lowerClassName}Service.selectPages(${lowerClassName}, pageNum, pageSize));
    }

    /**
     * 新增${comments}
     *
     * @param ${lowerClassName}
     *            新增对象信息
     * @return 影响的行数
     */
    @InOutLog("新增${comments}")
    @PostMapping("/save")
    public Result save(@RequestBody ${upperClassName}DO ${lowerClassName}) {
        return Result.success(${lowerClassName}Service.insert(${lowerClassName}));
    }

    /**
     * 通过主键修改${comments}
     *
     * @param ${lowerClassName}
     *            要修改的信息
     * @return 影响的行数
     */
    @InOutLog("通过主键修改${comments}")
    @PostMapping("/updateById")
    public Result updateById(@RequestBody ${upperClassName}DO ${lowerClassName}) {
        Assert.notNull(${lowerClassName}.get${pk.upperAttrName}(), ResultCode.PARAM_ILLEGAL);
        return Result.success(${lowerClassName}Service.updateById(${lowerClassName}));
    }

    /**
     * 通过主键删除${comments}
     *
     * @param ${pk.lowerAttrName}
     *            主键
     * @return 影响的行数
     */
    @InOutLog("通过主键删除${comments}")
    @GetMapping("/deleteById")
    public Result deleteById(@RequestParam("${pk.lowerAttrName}") ${pk.attrType} ${pk.lowerAttrName}) {
        Assert.notNull(${pk.lowerAttrName}, ResultCode.PARAM_ILLEGAL);
        ${upperClassName}DO ${lowerClassName} = new ${upperClassName}DO();
        ${lowerClassName}.set${pk.UpperAttrName}(${pk.lowerAttrName});
        return Result.success(${lowerClassName}Service.deleteById(${lowerClassName}));
    }

}
